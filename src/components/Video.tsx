import { useRef, useState } from "react";
import { ColourfulText } from "../ui/text";
import { motion, useInView } from "framer-motion";
import { Play, Pause } from "lucide-react";
import video from "../assets/videoplayback.mp4";

const Video = () => {
  const videoRef = useRef<HTMLVideoElement>(null);
  const containerRef = useRef(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const isInView = useInView(containerRef, { once: true });

  const togglePlay = () => {
    const videoEl = videoRef.current;
    if (!videoEl) return;

    if (videoEl.paused) {
      videoEl.play();
      setIsPlaying(true);
    } else {
      videoEl.pause();
      setIsPlaying(false);
    }
  };

  return (
    <div className="min-h-screen bg-black" id="showcase">
      <h1 className="text-5xl md:text-7xl font-extrabold bg-clip-text text-transparent bg-gradient-to-t from-neutral-200 to-neutral-600 mb-6 text-center">
        Take a look at the <ColourfulText text="Video" /> <br /> generated by our AI
      </h1>

      <div
        ref={containerRef}
        className="flex justify-center items-center h-screen bg-black relative overflow-hidden"
      >
        <motion.div
          className="absolute inset-0 bg-gradient-to-br from-gray-900/30 via-black to-gray-800/20"
          initial={{ opacity: 0 }}
          animate={isInView ? { opacity: 1 } : { opacity: 0 }}
          transition={{ duration: 2, ease: "easeOut" }}
        />

        <motion.div
          className="relative"
          initial={{ scale: 0.8, opacity: 0, y: 100 }}
          animate={isInView ? { scale: 1, opacity: 1, y: 0 } : {}}
          transition={{
            duration: 1.2,
            ease: "easeOut",
            type: "spring",
            stiffness: 80,
            damping: 20,
          }}
        >
          <motion.video
            ref={videoRef}
            src={video}
            className="relative rounded-[20px] border-2 border-white/20 w-[90vw] max-w-[1700px] h-[700px] shadow-2xl"
            playsInline
            preload="metadata"
            muted
            initial={{ borderRadius: "60px" }}
            animate={isInView ? { borderRadius: "20px" } : {}}
            transition={{
              delay: 0.6,
              duration: 1.2,
              ease: "easeOut",
            }}
          />
        </motion.div>

        <motion.button
          onClick={togglePlay}
          className="absolute text-white bg-black/40 hover:bg-black/60 backdrop-blur-md p-6 rounded-full transition-all duration-300 border-2 border-white/30 shadow-2xl"
          initial={{ scale: 0, rotate: 180, opacity: 0 }}
          animate={isInView ? { scale: 1, rotate: 0, opacity: 1 } : {}}
          transition={{
            delay: 2,
            duration: 0.8,
            type: "spring",
            stiffness: 150,
            damping: 20,
          }}
          whileHover={{
            scale: 1.1,
            borderColor: "rgba(255,255,255,0.6)",
            boxShadow: "0 0 25px rgba(255,255,255,0.2)",
          }}
          whileTap={{ scale: 0.95 }}
        >
          <motion.div
            initial={{ scale: 0 }}
            animate={isInView ? { scale: 1 } : { scale: 0 }}
            transition={{ delay: 2.3, duration: 0.4 }}
          >
            {isPlaying ? <Pause size={40} /> : <Play size={40} />}
          </motion.div>
        </motion.button>

        <motion.div
          className="absolute bottom-12 text-white/60 text-sm font-light tracking-[0.3em] uppercase"
          initial={{ opacity: 0, y: 30 }}
          animate={isInView ? { opacity: 1, y: 0 } : {}}
          transition={{ delay: 3.2, duration: 1.2 }}
        >
          Cinematic Experience
        </motion.div>
      </div>
    </div>
  );
};

export default Video;
